/**
 * 
 */
package com.wipro.wc.demo;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;


/**
 * @author Subash
 *
 */
public class JsoupCrawler implements ICrawler {

	/* (non-Javadoc)
	 * @see com.wipro.wc.demo.ICrawler#runCrawler()
	 */
	// We'll use a fake USER_AGENT so the web server thinks the robot is a normal web browser.
	private static final String USER_AGENT =
            "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1";
	String domainName = "";
	private static Pattern patternDomainName;
	  private Matcher matcher;
	  private static final String DOMAIN_NAME_PATTERN 
		= "([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,6}";
	  static {
		patternDomainName = Pattern.compile(DOMAIN_NAME_PATTERN);
	  }

    public void runCrawler() {
		// TODO Auto-generated method stub
        List<String> urls = this.getUrlList();
        for (String url : urls) {
            this.scan(url);
        }
    }

    /**
     * @return List<String>
     */
    public List<String> getUrlList() {
        List<String> result = new ArrayList<String>();
        result.add("https://www.wiprodigital.com");
        
        
        
        return result;
    }

    /**
     * @param url
     */
    public void scan(String url) {
    	
    	
    	/**
         * This performs all the work. It makes an HTTP request, checks the response, and then gathers
         * up all the links on the page. Perform a searchForWord after the successful crawl
         * 
         * @param url
         *            - The URL to visit
         * @return whether or not the crawl was successful
         */
        Document doc = null;
        try {
        	
        	Connection connection = Jsoup.connect(url).userAgent(USER_AGENT);
             doc = connection.get();
             
             if(connection.response().statusCode() == 200) // 200 is the HTTP OK status code
                 // indicating that everything is great.
{
System.out.println("\n**Visiting** Received web page at " + url);
}
            //htmlDocument = Jsoup.connect(url).get();
        } catch (IOException e) {
            e.printStackTrace();
        }

        Integer size = doc.body().toString().length();
        String title = doc.title();
        String log = url + " === " + size + " === " + title + "\n";

        System.out.println(log);
        
        /*Elements questions = doc.select("a");
		for(Element link: questions){
			//System.out.println(link);
			//String temp = link.attr("href");	
			//System.out.println(link.absUrl("href"));
			//page.attr("abs:href")
			// getDomainName(temp);
		}
		
		  Elements images = doc.getElementsByTag("img");
		  for(Element image: images){
				//System.out.println(image);
				String temp = image.attr("abs:src");	
				//System.out.println(temp);
				//page.attr("abs:href")
				// getDomainName(temp);
			}
		  
		  String html = doc.html();
		  	
				//System.out.println(html);
				//page.attr("abs:href")
				// getDomainName(temp);
		*/
		  
        Elements links = doc.select("a[href]");
        Elements media = doc.select("[src]");
        Elements imports = doc.select("link[href]");

        System.out.println("\nMedia: (%d)", media.size());
        for (Element src : media) {
            if (src.tagName().equals("img"))
                print(" * %s: <%s> %sx%s (%s)",
                        src.tagName(), src.attr("abs:src"), src.attr("width"), src.attr("height"),
                        trim(src.attr("alt"), 20));
            else
                print(" * %s: <%s>", src.tagName(), src.attr("abs:src"));
        }

        print("\nImports: (%d)", imports.size());
        for (Element link : imports) {
            print(" * %s <%s> (%s)", link.tagName(),link.attr("abs:href"), link.attr("rel"));
        }

        print("\nLinks: (%d)", links.size());
        for (Element link : links) {
            print(" * a: <%s>  (%s)", link.attr("abs:href"), trim(link.text(), 35));
        }

			

        try {
           // Files.append(log, new File(this.reportFile), Charsets.UTF_8);
        } catch (Exception e) {
            e.printStackTrace();
        }
        
       
    }

	
    public String getDomainName(String url){
		
    	String domainName = "";
    	matcher = patternDomainName.matcher(url);
    	if (matcher.find()) {
    		domainName = matcher.group(0).toLowerCase().trim();
    	}
    	System.out.println(domainName);
    	return domainName;
    		
      }	
	
	
	

}
